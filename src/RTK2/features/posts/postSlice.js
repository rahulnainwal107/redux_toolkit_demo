// Covers createSlice, createAsyncThunk, createAction

// src/features/posts/postSlice.js
import { createSlice, createAsyncThunk, createAction } from '@reduxjs/toolkit';
import axios from 'axios';

// 🔁 createAsyncThunk to handle async API call
export const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {
  const response = await axios.get('https://jsonplaceholder.typicode.com/posts');
  return response.data;
});

// 🔨 createAction (used for clearing state outside of slice)
export const clearPosts = createAction('posts/clearPosts');

// 🧩 createSlice
const postSlice = createSlice({
  name: 'posts',
  initialState: {
    items: [],
    loading: false,
    error: null,
  },
  reducers: {},

  // handle extra actions (thunks and custom actions)
  extraReducers: (builder) => {
    builder
      .addCase(fetchPosts.pending, (state) => {
        state.loading = true;
        state.error = null;
      })
      .addCase(fetchPosts.fulfilled, (state, action) => {
        state.loading = false;
        state.items = action.payload;
      })
      .addCase(fetchPosts.rejected, (state, action) => {
        state.loading = false;
        state.error = action.error.message;
      })
      .addCase(clearPosts, (state) => {
        state.items = [];
        state.error = null;
      });
  },
});

export default postSlice.reducer;



/*

The string 'posts/fetchPosts' is used to automatically generate action types:
'posts/fetchPosts/pending' - When the thunk starts
'posts/fetchPosts/fulfilled' - When it resolves successfully
'posts/fetchPosts/rejected' - When it throws an error


What is extraReducers in Redux Toolkit?

extraReducers is used in a createSlice() to handle: Actions that are not defined in your own reducers object.

That includes:

1- Actions generated by createAsyncThunk (like pending, fulfilled, rejected)
2- Actions created outside the slice (e.g., createAction() or from other slices)


Why do we need extraReducers?

Because the reducers field in createSlice() can only handle actions defined inside that slice. 
Use extraReducers when you need to respond to actions you didn't define inside your slice — especially for createAsyncThunk.

So if you're:

Fetching data with createAsyncThunk
Listening to global actions like user/logout
Reacting to shared actions from other slices

You need to use extraReducers to hook into those.


using reducers vs extraReducers

const counterSlice = createSlice({
  name: 'counter',
  initialState: 0,
  reducers: {
    increment: (state) => state + 1,
  },
});


-----


import { createAsyncThunk } from '@reduxjs/toolkit';

export const fetchUser = createAsyncThunk('user/fetch', async () => {
  const res = await fetch('/user');
  return await res.json();
});

const userSlice = createSlice({
  name: 'user',
  initialState: { data: null, loading: false },
  reducers: {},

  extraReducers: (builder) => {
    builder
      .addCase(fetchUser.pending, (state) => {
        state.loading = true;
      })
      .addCase(fetchUser.fulfilled, (state, action) => {
        state.loading = false;
        state.data = action.payload;
      })
      .addCase(fetchUser.rejected, (state) => {
        state.loading = false;
      });
  },
});

*/